name: Build IDE Intruders

on:
  workflow_dispatch:
    inputs:
      cdn_upload:
        description: 'Upload to CDN (/tmp)'
        required: true
        type: boolean
      wait_for_notarization:
        description: 'Wait for notarization'
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      build_environment: ${{ steps.environment-setup.outputs.build_environment }}

    steps:
    - uses: actions/checkout@v4

    - name: 'Extract branch name'
      shell: bash
      run: |
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}"
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        
    - name: 'Set environment variables'
      id: 'environment-setup'
      run: |
        build_environment=stage
        if [ "${BRANCH_NAME}" == 'production' ]; then
         build_environment=production
        fi
        if [ "${BRANCH_NAME}" == 'preview' ]; then
         build_environment=preview
        fi
        echo "build_environment=$build_environment" >> $GITHUB_ENV
        echo "build_environment=$build_environment" >> "$GITHUB_OUTPUT"

    - name: 'Install SSH key'
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
        if_key_exists: ignore

    - name: Setup digicert signing
      uses: YattaSolutions/setup-jarsigner-action@v1
      with:
        auth-certificate: ${{ secrets.DIGICERT_AUTH_CERTIFICATE }}
        auth-password: ${{ secrets.DIGICERT_AUTH_PASSWORD }}
        digicert-apikey: ${{ secrets.DIGICERT_APIKEY }}

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 'Setup Maven'
      uses: stCarolas/setup-maven@v5

    - name: 'Cache local Maven repository'
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: 'Check top-level product manifest for changes'
      working-directory: de.yatta.ideintruders.product
      run: |
          changed_lines=$(diff -y --suppress-common-lines IDE-Intruders.product resources/IDE-Intruders.product | wc -l)
          if [[ changed_lines -ne 1 ]]; then
            exit 1
          fi

    - name: 'Maven Build'
      working-directory: de.yatta.ideintruders.releng
      run: >
          mvn package -B
          -P eclipse-base
          -Dbuild.release=true
          -Dbuild.environment=${build_environment}

    - name: 'Prepare archives'
      run: |
          pushd de.yatta.ideintruders.product/target/products/
          mv ide-intruders-win32.win32.x86_64.zip YattaCheckoutDemo-x86_64.zip
          mv ide-intruders-linux.gtk.x86_64.tar.gz YattaCheckoutDemo-linux.tar.gz
          mv ide-intruders-macosx.cocoa.x86_64.zip YattaCheckoutDemo-macos-unsigned.zip
          popd
          zip -x .github/\* .git/\* \*\*/target/\* \*\*/.settings/\* -r de.yatta.ideintruders.site/target/YattaCheckoutDemo-source.zip .

    - name: 'Upload Update Site'
      uses: actions/upload-artifact@v4
      with:
        name: YattaCheckoutDemo-site
        path: |
          de.yatta.ideintruders.site/target/repository/

    - name: 'Upload sources and RCP - Windows+Linux'
      uses: actions/upload-artifact@v4
      with:
        name: YattaCheckoutDemo-binaries
        path: |
          de.yatta.ideintruders.product/target/products/YattaCheckoutDemo-x86_64.zip
          de.yatta.ideintruders.product/target/products/YattaCheckoutDemo-linux.tar.gz
          de.yatta.ideintruders.site/target/YattaCheckoutDemo-source.zip
        retention-days: 3

    - name: 'Upload RCP - Mac'
      uses: actions/upload-artifact@v4
      with:
        name: YattaCheckoutDemo-macos-unsigned
        path: de.yatta.ideintruders.product/target/products/YattaCheckoutDemo-macos-unsigned.zip
        retention-days: 1

  macos-signing:
    needs: build
    runs-on: 'macos-12'

    steps:
    - uses: actions/checkout@v4

    - name: 'Download RCP'
      uses: actions/download-artifact@v4
      with:
        name: YattaCheckoutDemo-macos-unsigned

    - name: 'Prepare files'
      run: |
          mkdir -p YattaCheckoutDemo
          pushd YattaCheckoutDemo
          unzip ../YattaCheckoutDemo-macos-unsigned.zip
          xattr -cr .
          popd

    - name: 'Import Certificate and Credentials'
      env:
        MACOS_SIGNING_CERTIFICATE: ${{ secrets.MACOS_SIGNING_CERTIFICATE }}
        MACOS_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_SIGNING_CERTIFICATE_PASSWORD }}
        MACOS_SIGNING_CREDENTIALS_USER: ${{ secrets.MACOS_SIGNING_CREDENTIALS_USER }}
        MACOS_SIGNING_CREDENTIALS_PASSWORD: ${{ secrets.MACOS_SIGNING_CREDENTIALS_PASSWORD }}
        MACOS_SIGNING_CREDENTIALS_TEAM: ${{ secrets.MACOS_SIGNING_CREDENTIALS_TEAM }}
      run: |
          echo ${MACOS_SIGNING_CERTIFICATE} | base64 --decode > certificates.p12
          security create-keychain -p ${MACOS_SIGNING_CREDENTIALS_PASSWORD} build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p ${MACOS_SIGNING_CREDENTIALS_PASSWORD}
          security import certificates.p12 -k build.keychain -P ${MACOS_SIGNING_CERTIFICATE_PASSWORD} -T /usr/bin/codesign
          rm -f certificates.p12
          security set-key-partition-list -S apple-tool:,apple: -s -k ${MACOS_SIGNING_CREDENTIALS_PASSWORD} build.keychain >/dev/null
          xcrun notarytool store-credentials "SIGNING_CREDENTIALS" --apple-id "${MACOS_SIGNING_CREDENTIALS_USER}" --team-id ${MACOS_SIGNING_CREDENTIALS_TEAM} --password ${MACOS_SIGNING_CREDENTIALS_PASSWORD}
          plutil -convert xml1 de.yatta.ideintruders.product/entitlements.plist

    - name: 'Signing application'
      env:
        MACOS_SIGNING_CREDENTIALS_TEAM: ${{ secrets.MACOS_SIGNING_CREDENTIALS_TEAM }}
      run: >
          codesign
          -s "Developer ID Application: Yatta Solutions GmbH (${MACOS_SIGNING_CREDENTIALS_TEAM})"
          --deep YattaCheckoutDemo/Yatta\ Checkout\ Demo.app/
          --force
          --timestamp
          --options=runtime
          --entitlements=de.yatta.ideintruders.product/entitlements.plist

    - name: 'Notarizing application - Skip stapler'
      if: ${{ !inputs.wait_for_notarization }}
      run: |
          zip -ry YattaCheckoutDemo-macos.zip YattaCheckoutDemo
          xcrun notarytool submit YattaCheckoutDemo-macos.zip --keychain-profile "SIGNING_CREDENTIALS"

    - name: 'Notarizing application - With stapler for apple signatures'
      if:  ${{ inputs.wait_for_notarization }}
      run: |
          zip -ry YattaCheckoutDemo-macos-signed.zip YattaCheckoutDemo
          xcrun notarytool submit YattaCheckoutDemo-macos-signed.zip --keychain-profile "SIGNING_CREDENTIALS" --wait
          xcrun stapler staple YattaCheckoutDemo/Yatta\ Checkout\ Demo.app
          zip -ry YattaCheckoutDemo-macos.zip YattaCheckoutDemo

    - name: 'Reset Keychain'
      run: |
          security default-keychain -s login.keychain
          security delete-keychain build.keychain

    - name: 'Upload RCP - Mac'
      uses: actions/upload-artifact@v4
      with:
        name: YattaCheckoutDemo-binaries
        path: YattaCheckoutDemo-macos.zip
        retention-days: 3

  upload-cdn:
    runs-on: ubuntu-22.04
    needs: [build, macos-signing]
    if: ${{ inputs.cdn_upload }}
    steps:
      
    - name: Install SSH key for CDN
      uses: shimataro/ssh-key-action@v2
      with:
        name: id_platform_ci_cdn
        key: ${{ secrets.SSH_KEY_PLATFORM_CI_CDN }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOST_CDN }}
        config: ${{ secrets.SSH_CONFIG_CDN }}

    - name: 'Download RCP - binaries'
      uses: actions/download-artifact@v4
      with:
        path: resources
        name: YattaCheckoutDemo-binaries

    - name: 'Download RCP - update-site'
      uses: actions/download-artifact@v4
      with:
        name: YattaCheckoutDemo-site

    - name: 'Set environment variables for the deployment'
      env:
        build_environment: ${{ needs.build.outputs.build_environment }}
      run: |
        case "$build_environment" in
        "preview")
          CDN_PATH_SITE=preview/update/checkout-eclipse-demo
          CDN_PATH_RESOURCE=resources/products/checkout-eclipse-demo/preview
          ;;
        "production")
          CDN_PATH_SITE=update/checkout-eclipse-demo
          CDN_PATH_RESOURCE=resources/products/checkout-eclipse-demo
          ;;
        *)
          CDN_PATH_SITE=stage/update/checkout-eclipse-demo
          CDN_PATH_RESOURCE=resources/products/checkout-eclipse-demo/stage
          ;;
        esac
        VERSION=$(find repository/plugins/ -name '*.jar' | head -n 1 | sed -nE 's/[^_]*_([0-9\.]*)\.jar$/\1/p')
        echo "CDN_PATH_SITE=$CDN_PATH_SITE" >> $GITHUB_ENV
        echo "CDN_PATH_RESOURCE=$CDN_PATH_RESOURCE" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: 'Create composite update-site'
      working-directory: repository_top_level/
      run: |
        TIMESTAMP=$(date +%s)000
        XML_CONTENT_ARTIFACT=$(cat << EOF
        <?xml version='1.0' encoding='UTF-8'?>
        <?compositeArtifactRepository version='1.0.0'?>
        <repository name='Yatta Marketplace and Licensing' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1.0.0'>
          <properties size='1'>
            <property name='p2.timestamp' value='$TIMESTAMP'/>
          </properties>
          <children size='1'>
            <child location='v/$VERSION'/>
          </children>
        </repository>
        EOF
        )
        echo $XML_CONTENT_ARTIFACT >> compositeArtifacts.xml

        XML_CONTENT_METADATA=$(cat << EOF
        <?xml version='1.0' encoding='UTF-8'?>
        <?compositeMetadataRepository version='1.0.0'?>
        <repository name='Yatta Marketplace and Licensing' type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository' version='1.0.0'>
          <properties size='1'>
            <property name='p2.timestamp' value='$TIMESTAMP'/>
          </properties>
          <children size='1'>
            <child location='v/$VERSION'/>
          </children>
        </repository>
        EOF
        )
        echo $XML_CONTENT_METADATA >> compositeContent.xml

    - name: "CDN77 Access key"
      if: env.ISRELEASE == 'true'
      run: |
        aws configure --profile s3-sync <<-EOF > /dev/null 2>&1
        ${{ secrets.CDN77_PLATFORM_CI_KEY_ID }}
        ${{ secrets.CDN_PLATFORM_CI_KEY_SECRET }}
        eu-central-1
        text
        EOF

    - name: 'Upload files to CDN'
      run: >
        aws s3 sync --profile s3-sync --endpoint-url https://eu-1.cdn77-storage.com --no-progress
        repository/ s3://platform-production-cdn/$CDN_PATH_SITE/v/$VERSION/
        &&
        aws s3 sync --profile s3-sync --endpoint-url https://eu-1.cdn77-storage.com --no-progress
        repository_top_level/ s3://platform-production-cdn/$CDN_PATH_SITE/
        &&
        aws s3 sync --profile s3-sync --endpoint-url https://eu-1.cdn77-storage.com --no-progress
        resources/ s3://platform-production-cdn/$CDN_PATH_RESOURCE/v/$VERSION/
        &&
        aws s3 sync --profile s3-sync --endpoint-url https://eu-1.cdn77-storage.com --no-progress
        resources/ s3://platform-production-cdn/$CDN_PATH_RESOURCE/

    - name: 'Purge CDN paths'
      run: >
        curl
        --request POST
        --url https://api.cdn77.com/v3/cdn/1041707535/job/purge
        --header 'authorization: Bearer ${{ secrets.CDN77_PURGE_TOKEN }}'
        --data '{"paths": ["/${{ env.CDN_PATH_SITE }}/*", "/${{ env.CDN_PATH_RESOURCE }}/*"]}'
